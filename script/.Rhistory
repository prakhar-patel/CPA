viz.timeSeries <- viz.scatter
viz.timeSeries$timeSeries <- ggplot()+
geom_tallrect(aes(
xmin=Step-0.5, xmax=Step+0.5),
clickSelects="Step",
alpha=0.3,
data=df)+
geom_line(aes(
x=Step, y=Distance, group=ball, color=ball),
clickSelects="ball",
size=3,
alpha=0.8,
data=df)+scale_color_manual(values=colors)+labs(title="Time Series")
viz.timeSeries
ggplot_anim2 <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball),size = 8,clickSelects = "Step",alpha=0.7,data=df) +
labs(title = "Individual Step",
x = "X", y = "Y")
(viz.scatter <- animint(ggplot_anim2,duration=list(Step=2000)))
viz.timeSeries <- viz.scatter
viz.timeSeries$timeSeries <- ggplot()+
geom_tallrect(aes(
xmin=Step-0.5, xmax=Step+0.5),
clickSelects="Step",
alpha=0.3,
data=df)+
geom_line(aes(
x=Step, y=Distance, group=ball, color=ball),
clickSelects="ball",
size=3,
alpha=0.8,
data=df)+scale_color_manual(values=colors)+labs(title="Time Series")
viz.timeSeries
library(ggplot2)
library(animint2)
# Function to generate data for one animation frame
generate_data <- function(sigma, curr_pos){
# Simulate step using independent Gaussian noise for x and y
step <- rnorm(2, mean = 0, sd = sigma)
# Update current position
position <- curr_pos + step
return(c(position[1],position[2]))
}
sequence <- function(n) {
temp <- numeric(40 * n)
for (i in 1:(40 * n)) {
if (i %% 40 == 0) {
temp[i] <- 40
} else {
temp[i] <- i %% 40
}
}
return(temp)
}
BrownianMotion <- function(n_balls, sigma, start_pos) {
# Define a color palette based on number of balls
colors <- rainbow(n_balls)  # Use rainbow palette for distinct colors
# Generate data for animation
n_steps <- 40 * n_balls
df <- data.frame(X=0,Y=0)
curr_pos <- start_pos
for(i in 2:n_steps){
if(i%%40==1)curr_pos <- start_pos
temp <- generate_data(sigma,curr_pos)
curr_pos <- temp
df <- rbind(df,temp)
}
Step <- rep(1:40,length.out=n_balls)
ball <- rep(1:n_balls,each=40)
df <- cbind(df,ball)
df <- cbind(Step=sequence(n_balls),df)
#Making the starting point as origin
for(i in 1:n_balls-1){
df[1+i*40,2]=0
df[1+i*40,3]=0
}
#Distance added
Distance <- sqrt(df[,2]^2+df[,3]^2)
df <- cbind(df,Distance)
#Naming the color as Ball number
df$ball <- as.factor(df$ball)
names(colors) <- levels(df$ball)
# Create the animation
ggplot_anim <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball,key=ball),showSelected = "Step", size = 10,data=df) +
labs(title = "2D Brownian Motion Simulation",
x = "X", y = "Y") +theme_bw()
# Animate the plot
(viz.duration <- animint(ggplot_anim, duration = list(Step = 300),source="https://github.com/Vatsal-Rajput/Animint2Test",title="BrownianMotion"))
# Set animation time
viz.duration.time <- viz.duration
viz.duration.time$time <- list(variable = "Step", ms = 300)
# Return the animated plot
return(viz.duration.time)
}
# Example usage
# Set parameters
n_balls <- 5
sigma <- 0.5
start_pos <- c(0, 0)
# Create and display the animation
animation <- BrownianMotion(n_balls, sigma, start_pos)
animation
#Second plot
ggplot_anim2 <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball),size = 8,clickSelects = "Step",alpha=0.7,data=df) +
labs(title = "Individual Step",
x = "X", y = "Y")
(viz.scatter <- animint(ggplot_anim2,duration=list(Step=2000)))
#Time series plot
viz.timeSeries <- viz.scatter
viz.timeSeries$timeSeries <- ggplot()+
geom_tallrect(aes(
xmin=Step-0.5, xmax=Step+0.5),
clickSelects="Step",
alpha=0.3,
data=df)+
geom_line(aes(
x=Step, y=Distance, group=ball, color=ball),
clickSelects="ball",
size=3,
alpha=0.8,
data=df)+scale_color_manual(values=colors)+labs(title="Time Series")
viz.timeSeries
animation
library(ggplot2)
library(animint2)
# Function to generate data for one animation frame
generate_data <- function(sigma, curr_pos){
# Simulate step using independent Gaussian noise for x and y
step <- rnorm(2, mean = 0, sd = sigma)
# Update current position
position <- curr_pos + step
return(c(position[1],position[2]))
}
sequence <- function(n) {
temp <- numeric(40 * n)
for (i in 1:(40 * n)) {
if (i %% 40 == 0) {
temp[i] <- 40
} else {
temp[i] <- i %% 40
}
}
return(temp)
}
BrownianMotion <- function(n_balls, sigma, start_pos) {
# Define a color palette based on number of balls
colors <- rainbow(n_balls)  # Use rainbow palette for distinct colors
# Generate data for animation
n_steps <- 40 * n_balls
df <- data.frame(X=0,Y=0)
curr_pos <- start_pos
for(i in 2:n_steps){
if(i%%40==1)curr_pos <- start_pos
temp <- generate_data(sigma,curr_pos)
curr_pos <- temp
df <- rbind(df,temp)
}
Step <- rep(1:40,length.out=n_balls)
ball <- rep(1:n_balls,each=40)
df <- cbind(df,ball)
df <- cbind(Step=sequence(n_balls),df)
#Making the starting point as origin
for(i in 1:n_balls-1){
df[1+i*40,2]=0
df[1+i*40,3]=0
}
#Distance added
Distance <- sqrt(df[,2]^2+df[,3]^2)
df <- cbind(df,Distance)
#Naming the color as Ball number
df$ball <- as.factor(df$ball)
names(colors) <- levels(df$ball)
# Create the animation
ggplot_anim <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball,key=ball),showSelected = "Step", size = 10,data=df) +
labs(title = "2D Brownian Motion Simulation",
x = "X", y = "Y") +theme_bw()
# Animate the plot
(viz.duration <- animint(ggplot_anim, duration = list(Step = 300),source="https://github.com/Vatsal-Rajput/Animint2Test",title="BrownianMotion"))
# Set animation time
viz.duration.time <- viz.duration
viz.duration.time$time <- list(variable = "Step", ms = 300)
# Return the animated plot
return(viz.duration.time)
}
# Example usage
# Set parameters
n_balls <- 5
sigma <- 0.5
start_pos <- c(0, 0)
# Create and display the animation
animation <- BrownianMotion(n_balls, sigma, start_pos)
animation
#Second plot
ggplot_anim2 <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball),size = 8,clickSelects = "Step",alpha=0.7,data=df) +
labs(title = "Individual Step",
x = "X", y = "Y")
(viz.scatter <- animint(ggplot_anim2,duration=list(Step=2000)))
#Time series plot
viz.timeSeries <- viz.scatter
viz.timeSeries$timeSeries <- ggplot()+
geom_tallrect(aes(
xmin=Step-0.5, xmax=Step+0.5),
clickSelects="Step",
alpha=0.3,
data=df)+
geom_line(aes(
x=Step, y=Distance, group=ball, color=ball),
clickSelects="ball",
size=3,
alpha=0.8,
data=df)+scale_color_manual(values=colors)+labs(title="Time Series")
viz.timeSeries
animation
library(ggplot2)
library(animint2)
# Function to generate data for one animation frame
generate_data <- function(sigma, curr_pos){
# Simulate step using independent Gaussian noise for x and y
step <- rnorm(2, mean = 0, sd = sigma)
# Update current position
position <- curr_pos + step
return(c(position[1],position[2]))
}
sequence <- function(n) {
temp <- numeric(40 * n)
for (i in 1:(40 * n)) {
if (i %% 40 == 0) {
temp[i] <- 40
} else {
temp[i] <- i %% 40
}
}
return(temp)
}
BrownianMotion <- function(n_balls, sigma, start_pos) {
# Define a color palette based on number of balls
colors <- rainbow(n_balls)  # Use rainbow palette for distinct colors
# Generate data for animation
n_steps <- 40 * n_balls
df <- data.frame(X=0,Y=0)
curr_pos <- start_pos
for(i in 2:n_steps){
if(i%%40==1)curr_pos <- start_pos
temp <- generate_data(sigma,curr_pos)
curr_pos <- temp
df <- rbind(df,temp)
}
Step <- rep(1:40,length.out=n_balls)
ball <- rep(1:n_balls,each=40)
df <- cbind(df,ball)
df <- cbind(Step=sequence(n_balls),df)
#Making the starting point as origin
for(i in 1:n_balls-1){
df[1+i*40,2]=0
df[1+i*40,3]=0
}
#Distance added
Distance <- sqrt(df[,2]^2+df[,3]^2)
df <- cbind(df,Distance)
#Naming the color as Ball number
df$ball <- as.factor(df$ball)
names(colors) <- levels(df$ball)
# Create the animation
ggplot_anim <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball,key=ball),showSelected = "Step", size = 10,data=df) +
labs(title = "2D Brownian Motion Simulation",
x = "X", y = "Y") +theme_bw()
# Animate the plot
(viz.duration <- animint(ggplot_anim, duration = list(Step = 300),source="https://github.com/Vatsal-Rajput/Animint2Test",title="BrownianMotion"))
# Set animation time
viz.duration.time <- viz.duration
viz.duration.time$time <- list(variable = "Step", ms = 300)
# Return the animated plot
return(viz.duration.time)
}
# Example usage
# Set parameters
n_balls <- 5
sigma <- 0.5
start_pos <- c(0, 0)
# Create and display the animation
animation <- BrownianMotion(n_balls, sigma, start_pos)
animation
#Second plot
ggplot_anim2 <- ggplot() +scale_color_manual(values=colors)+
geom_point(aes(x = X, y = Y, color = ball),size = 8,clickSelects = "Step",alpha=0.7,data=df) +
labs(title = "Individual Step",
x = "X", y = "Y")
(viz.scatter <- animint(ggplot_anim2,duration=list(Step=2000)))
#Time series plot
viz.timeSeries <- viz.scatter
viz.timeSeries$timeSeries <- ggplot()+
geom_tallrect(aes(
xmin=Step-0.5, xmax=Step+0.5),
clickSelects="Step",
alpha=0.3,
data=df)+
geom_line(aes(
x=Step, y=Distance, group=ball, color=ball),
clickSelects="ball",
size=3,
alpha=0.8,
data=df)+scale_color_manual(values=colors)+labs(title="Time Series")
viz.timeSeries
animation
animint2pages(c(animation,viz.timeSeries),"BrownianMotion")
animint2::update_gallery("/Users/vatsalrajput/Gsoc/Vatsal-Animint-Gallery")
animint2::update_gallery("/Users/vatsalrajput/Gsoc/Vatsal-Animint-Gallery")
dt <- read.csv('MetaData.csv')
dt <- read.csv('MetaData.csv')
dt <- read.csv('meta.csv')
animint2::update_gallery("/Users/vatsalrajput/Gsoc/Vatsal-Animint-Gallery")
library(data.table)
library(kableExtra)
dt <- read.csv('meta.csv')
no_of_ani <- dim(dt)[1]
image_links <- numeric(no_of_ani)
for(i in 1:dim(dt)[1]){
image_links[i] <- sprintf("%s%s%s","https://raw.githubusercontent.com/",dt$viz_owner_repo[i],"/gh-pages/Capture.png")
}
image_df <- data.frame(Image="")
Source <- paste0("<a href=", dt$source, ">", dt$title, "</a>")
gh_page_repo_link <- sprintf("%s%s%s","https://github.com/",dt$viz_owner_repo,"/tree/gh-pages")
gh_page_repo <- paste0("<a href=", gh_page_repo_link, ">", dt$commit.POSIXct, "</a>")
Creator <- strsplit(dt$viz_owner_repo,split="/")
Creator <- Creator[[1]][1]
full_data <- cbind(image_df, dt,Source,gh_page_repo,Creator)
full_data <- full_data[,c(1,7,8,9)]
#Creating table
kable(full_data, format = "html",escape=FALSE) %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, image = list(
src = image_links
))
full_data
View(full_data)
#Creating table
kable(full_data, format = "html",escape=FALSE) %>%
kable_styling(full_width = FALSE) %>%
column_spec(1, image = list(
src = image_links
))
image_links
samp <- rnorm(100,1,1)
conf.int <- t.test(samp, conf.level=0.95)
conf.int <- t.test(samp, conf.level=0.95)$conf.int
conf.int
tl <- conf.int[1]
tl
tu <- conf.int[2]
tu
prop <- numeric()
n <- c(10,100,1000,10000,100000)
p <- rnorm(i,10,1)
samp <- rnorm(100,1,1)
conf.int <- t.test(samp, conf.level=0.95)$conf.int
tl <- conf.int[1]
tu <- conf.int[2]
prop <- numeric()
n <- c(10,100,1000,10000,100000)
for(i in n){
p <- rnorm(i,10,1)
for(j in 1:i){
if(tl<=p[j] && p[j<=tu]){
p[j] =1
}
else{
p[j] = 0
}
}
prop <- c(prop,sum(p)/i)
}
samp <- rnorm(100,1,1)
conf.int <- t.test(samp, conf.level=0.95)$conf.int
tl <- conf.int[1]
tu <- conf.int[2]
prop <- numeric()
n <- c(10,100,1000,10000,100000)
for(i in n){
p <- rnorm(i,10,1)
for(j in 1:i){
if(tl<=p[j] && p[j]<=tu){
p[j] =1
}
else{
p[j] = 0
}
}
prop <- c(prop,sum(p)/i)
}
prop
tl
tu
i <- 10
rnorm(i,10,1)
samp <- rnorm(100,10,1)
conf.int <- t.test(samp, conf.level=0.95)$conf.int
tl <- conf.int[1]
tu <- conf.int[2]
prop <- numeric()
n <- c(10,100,1000,10000,100000)
for(i in n){
p <- rnorm(i,10,1)
for(j in 1:i){
if(tl<=p[j] && p[j]<=tu){
p[j] =1
}
else{
p[j] = 0
}
}
prop <- c(prop,sum(p)/i)
}
prop
samp <- rnorm(100,10,1)
conf.int <- t.test(samp, conf.level=0.95)$conf.int
tl <- conf.int[1]
tu <- conf.int[2]
prop <- numeric()
n <- c(10,100,1000,10000,100000)
for(i in n){
p <- rnorm(i,10,1)
for(j in 1:i){
if(tl<=p[j] && p[j]<=tu){
p[j] =1
}
else{
p[j] = 0
}
}
prop <- c(prop,sum(p)/i)
}
prop
tl
tu
tl <- mean(samp) + qnorm(0.975)/10
tu <- mean(samp) - qnorm(0.975)/10
tl
tu
est_prob <- function(theta, n, alpha){
y <- rnorm(n, mean = theta, sd = 1)
upper_ci <- mean(y) + (1/sqrt(n))*qnorm(1-alpha/2)
lower_ci <- mean(y) - (1/sqrt(n))*qnorm(1-alpha/2)
y101 <- rnorm(1, mean = theta, sd = 1)
coverage <- ifelse(y101 > lower_ci & y101 < upper_ci, 1, 0)
return(coverage)
}
iter_seq <- c(1e1, 1e2, 1e3, 1e4, 1e5) ### sequence of replications
iter_num <- max(iter_seq) ### number of maximum replications
store_cov <- vector(length = length(iter_num))
for (i in 1:iter_num) {
store_cov[i] <- est_prob(10, 100, 0.05)
}
p_est <- vector(length = length(iter_seq))
p_sd <- vector(length = length(iter_seq))
for (i in 1:length(iter_seq)) {
s <- iter_seq[i]
p_est[i] <- mean(store_cov[1:s])
p_sd[i] <- sd(store_cov[1:s])/sqrt(s)
}
p_est   # estimate of p for different replications
p_sd    # se of p for different replications
CI.up = p_est + p_sd
CI.dn = p_est - p_sd
###Plot of estimated p versus replication##
plot(p_est ~ log(iter_seq), xlab = "number of replictaions", ylab = "p_est", type = "l", ylim=c(0,0.3), col='red')
arrows(log(iter_seq), CI.dn, log(iter_seq), CI.up, code=3, length=0.2, angle=90, col='blue')
prop
prop
GSS <- read.table("http://stat4ds.rwth-aachen.de/data/GSS2018.dat", header=T)
gender <- factor(GSS$SEX, levels=c(1,2), labels = c("Male","Female"))
smallgap <- factor(GSS$SMALLGAP, levels=c(1:5), labels = c("strongly agree", "agree","neutral","disagree","strongly disagree"))
fairsociety <- table(gender,smallgap) # frequency table
fairsociety
cond.prob1 <- prop.table(fairsociety, 1) # cond. prop. within rows
cond.prob2 <- prop.table(fairsociety, 2) # cond. prop. within
cond.prob1
fairsociety
View(dt)
View(full_data)
View(data)
View(data)
data <- read.csv('MarketingData')
setwd("~/Projects/DataZoids-DS_Project/Script")
library(ggplot2)
library(corrplot)
data <- read.csv('MarketingData')
data <- read.csv('MarketingData')
View(data)
higherstudies.data.income <- data$Income[data$Education %in% c("Master", "PhD")]
t.test(graduation.data,higherstudies.data.income,var.equal=TRUE,conf.level=0.95)
data <- read.csv('MarketingData')
graduation.data <- data$Income[data$Education=="Graduation"]
higherstudies.data.income <- data$Income[data$Education %in% c("Master", "PhD")]
t.test(graduation.data,higherstudies.data.income,var.equal=TRUE,conf.level=0.95)
higherstudies.data <- data$Education[data$Education %in% c("Graduation", "Master")]
higherstudies.data
dim(data
)
higherstudies.data <- data[data$Education %in% c("Graduation", "Master"),c(4,30)]
higherstudies.data
table(higherstudies.data)
prop.test(c(964,309),c(152,56),conf.level=0.95, correct=FALSE)
prop.test(c(964,309),c(152,56),conf.level=0.95, correct=FALSE)
prop.test(c(964,309),c(1116,365),conf.level=0.95, correct=FALSE)
#Prop testing
table(higherstudies.data)
prop.test(c(964,309),c(1116,365),conf.level=0.95, correct=FALSE)
